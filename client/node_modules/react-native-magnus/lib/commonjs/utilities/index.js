"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useStateCallback = exports.removeSpecificProps = exports.isValidColor = exports.isString = exports.isPromise = exports.isObject = exports.isNaN = exports.isInteger = exports.isInputEvent = exports.isFunction = exports.isEmptyChildren = exports.isEmptyArray = exports.getSpecificProps = exports.WINDOW_WIDTH = exports.WINDOW_HEIGHT = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _validateColor = require("validate-color");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const WINDOW = _reactNative.Dimensions.get('window');

const WINDOW_WIDTH = WINDOW.width;
exports.WINDOW_WIDTH = WINDOW_WIDTH;
const WINDOW_HEIGHT = WINDOW.height; //is the value an empty array?

exports.WINDOW_HEIGHT = WINDOW_HEIGHT;

const isEmptyArray = value => Array.isArray(value) && value.length === 0; // is the given object a Function?


exports.isEmptyArray = isEmptyArray;

const isFunction = obj => typeof obj === 'function'; // is the given object an Object?


exports.isFunction = isFunction;

const isObject = obj => obj !== null && typeof obj === 'object'; // is the given object an integer?


exports.isObject = isObject;

const isInteger = obj => String(Math.floor(Number(obj))) === obj; // is the given object a string?


exports.isInteger = isInteger;

const isString = obj => Object.prototype.toString.call(obj) === '[object String]'; // is the given object a NaN?
// eslint-disable-next-line no-self-compare


exports.isString = isString;

const isNaN = obj => obj !== obj; // Does a React component have exactly 0 children?


exports.isNaN = isNaN;

const isEmptyChildren = children => React.Children.count(children) === 0; // is the given object/value a promise?


exports.isEmptyChildren = isEmptyChildren;

const isPromise = value => isObject(value) && isFunction(value.then); // is the given object/value a type of synthetic event?


exports.isPromise = isPromise;

const isInputEvent = value => value && isObject(value) && isObject(value.target);
/**
 * useState with callback
 *
 * @param initialState
 */


exports.isInputEvent = isInputEvent;

const useStateCallback = initialState => {
  const [state, setState] = (0, React.useState)(initialState);
  const cbRef = (0, React.useRef)(null); // mutable ref to store current callback

  const setStateCallback = (state, cb) => {
    cbRef.current = cb; // store passed callback to ref

    setState(state);
  };

  (0, React.useEffect)(() => {
    // cb.current is `null` on initial render, so we only execute cb on state *updates*
    if (cbRef.current) {
      //@ts-ignore
      cbRef.current(state);
      cbRef.current = null; // reset callback after execution
    }
  }, [state]);
  return [state, setStateCallback];
};

exports.useStateCallback = useStateCallback;

const isValidColor = color => {
  return (0, _validateColor.validateHTMLColorRgb)(color) || (0, _validateColor.validateHTMLColorSpecialName)(color) || (0, _validateColor.validateHTMLColorHex)(color) || (0, _validateColor.validateHTMLColorHsl)(color);
};

exports.isValidColor = isValidColor;

const getSpecificProps = function (obj) {
  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    keys[_key - 1] = arguments[_key];
  }

  return (//@ts-ignore
    keys.reduce((a, c) => ({ ...a,
      [c]: obj[c]
    }), {})
  );
};

exports.getSpecificProps = getSpecificProps;

const removeSpecificProps = function (obj) {
  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    keys[_key2 - 1] = arguments[_key2];
  }

  return keys.reduce((a, c) => {
    //@ts-ignore
    delete a[c];
    return a;
  }, obj);
};

exports.removeSpecificProps = removeSpecificProps;
//# sourceMappingURL=index.js.map