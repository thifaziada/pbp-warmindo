"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dropdown = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNativeModal = _interopRequireDefault(require("react-native-modal"));

var _reactNative = require("react-native");

var _div = require("../div/div.component");

var _dropdown = require("./dropdown.style");

var _text = require("../text/text.component");

var _dropdownOption = require("./dropdown.option.component");

var _theme = require("../../theme");

var _useDefaultProps = require("../../utilities/useDefaultProps");

var _theme2 = require("../../theme/theme.service");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Dropdown = /*#__PURE__*/React.forwardRef((incomingProps, ref) => {
  const props = (0, _useDefaultProps.useDefaultProps)('Dropdown', incomingProps, {
    bg: 'white',
    rounded: 'none',
    showSwipeIndicator: _reactNative.Platform.OS === 'web' ? false : true,
    backdropColor: 'gray900',
    backdropOpacity: 0.5,
    flexWrap: 'nowrap',
    backdropTransitionOutTiming: 0,
    overflow: 'hidden',
    py: 'xl'
  });
  const {
    bg,
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    style,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    title,
    showSwipeIndicator,
    children,
    backdropColor,
    flexDir,
    flexWrap,
    isVisible,
    onBackdropPress,
    swipeDirection,
    onSwipeComplete,
    ...rest
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const computedStyle = (0, _dropdown.getStyle)(theme, props);
  const [visible, setVisible] = (0, React.useState)(props.isVisible ?? false);
  (0, React.useEffect)(() => {
    if ('isVisible' in props) {
      setVisible(props.isVisible ?? false);
    }
  }, [props, visible]);
  /**
   * exposing functions through ref
   */

  (0, React.useImperativeHandle)(ref, () => ({
    open() {
      setVisible(true);
    },

    close() {
      setVisible(false);
    }

  }));
  /**
   * render title
   */

  const renderTitle = () => {
    if (title) {
      return typeof title === 'string' ? /*#__PURE__*/React.createElement(_text.Text, {
        fontSize: "md",
        color: "gray700"
      }, title) : title;
    }

    return false;
  };
  /**
   * render scroll indicator
   */


  const renderIndicator = () => {
    return showSwipeIndicator && /*#__PURE__*/React.createElement(_div.Div, {
      h: 7,
      rounded: "xl",
      w: 40,
      bg: "gray200",
      style: computedStyle.indicator
    });
  };

  return /*#__PURE__*/React.createElement(_reactNativeModal.default, _extends({
    isVisible: visible,
    onSwipeComplete: params => {
      setVisible(false);
      onSwipeComplete && onSwipeComplete(params);
    },
    backdropColor: (0, _theme2.getThemeColor)(theme.colors, backdropColor),
    onBackdropPress: 'onBackdropPress' in props ? onBackdropPress : () => setVisible(false),
    style: {
      margin: 0,
      justifyContent: _reactNative.Platform.OS === 'web' ? 'center' : 'flex-end'
    },
    swipeDirection: "down"
  }, rest), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.wrapper
  }, renderIndicator(), /*#__PURE__*/React.createElement(_reactNative.SafeAreaView, null, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.container
  }, renderTitle(), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.options
  }, React.Children.map(children, child => {
    return /*#__PURE__*/React.cloneElement(child, {
      onSelect: () => {
        setVisible(false);
      }
    });
  }))))));
});
exports.Dropdown = Dropdown;
Dropdown.Option = _dropdownOption.DropdownOption; // Dropdown.defaultProps = {
//   bg: 'white',
//   rounded: 'none',
//   showSwipeIndicator: Platform.OS === 'web' ? false : true,
//   backdropColor: 'gray900',
//   backdropOpacity: 0.5,
//   flexWrap: 'nowrap',
//   backdropTransitionOutTiming: 0,
//   overflow: 'hidden',
// };
//# sourceMappingURL=dropdown.component.js.map