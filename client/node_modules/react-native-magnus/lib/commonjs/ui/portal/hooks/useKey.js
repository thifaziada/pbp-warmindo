"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useKey = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Generates a random key
const keyGenerator = () => {
  return `portalize_${Math.random().toString(36).substr(2, 16)}-${Math.random().toString(36).substr(2, 16)}-${Math.random().toString(36).substr(2, 16)}`;
}; // Custom hook that checks for uniqueness and retries if clashes


const useKey = () => {
  const usedKeys = React.useRef([]);

  const generateKey = () => {
    let foundUniqueKey = false;
    let newKey = '';
    let tries = 0;

    while (!foundUniqueKey && tries < 3) {
      // limit number of tries to stop endless loop of pain
      tries++;
      newKey = keyGenerator();

      if (!usedKeys.current.includes(newKey)) {
        foundUniqueKey = true;
      }
    } // will only run if exited while loop without finding a unique key


    if (!foundUniqueKey) {
      newKey = `portalize_${Date.now()}_${Math.floor(Math.random() * 1000)}`; // fallback method
    }

    usedKeys.current.push(newKey);
    return newKey;
  }; // Removes our key to make it 'available' again


  const removeKey = key => {
    usedKeys.current = usedKeys.current.filter(k => k !== key);
  };

  return {
    generateKey,
    removeKey
  };
};

exports.useKey = useKey;
//# sourceMappingURL=useKey.js.map