"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _button = require("./button.style");

var _theme = require("../../theme");

var _theme2 = require("../../theme/theme.service");

var _button2 = require("./button.service");

var _text = require("../text/text.component");

var _types = require("../../types");

var _utilities = require("../../utilities");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Button = incomingProps => {
  const props = (0, _useDefaultProps.useDefaultProps)('Button', incomingProps, {
    bg: 'blue600',
    p: 'lg',
    color: 'white',
    rounded: 'sm',
    loading: false,
    disabled: false,
    loaderSize: '2xl',
    loaderColor: 'white',
    block: false,
    position: 'relative',
    shadowColor: 'gray800',
    shadow: 0,
    fontSize: 'lg',
    rippleColor: 'white',
    ripple: true,
    borderless: false,
    alignItems: 'center',
    justifyContent: 'center',
    alignSelf: 'flex-start',
    onPress: () => {},
    flexDir: 'row'
  });
  const {
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    h,
    w,
    bg,
    minW,
    minH,
    suffix,
    style,
    fontSize,
    fontWeight,
    prefix,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    color: colorProp,
    loading,
    disabled,
    loaderColor,
    loaderSize,
    children,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    shadow,
    borderless,
    rippleColor,
    shadowColor,
    onPress,
    block,
    ripple,
    alignSelf,
    ...rest
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const computedStyle = (0, _button.getStyle)(theme, props);
  const underlayColor = (0, _button2.getUnderlayColor)(theme, props);
  const calculatedRippleColor = (0, _button2.getRippleColor)(theme, props);
  /**
   * renders children based on type
   */

  const renderChildren = () => {
    if (typeof children === 'string') {
      return /*#__PURE__*/React.createElement(_text.Text, _extends({}, (0, _utilities.getSpecificProps)(props, ..._types.textProps), {
        style: computedStyle.text
      }), children);
    }

    return children;
  };

  return /*#__PURE__*/React.createElement(_reactNative.Pressable, _extends({}, rest, {
    onPress: disabled || loading ? undefined : onPress,
    style: _ref => {
      let {
        pressed
      } = _ref;
      return [computedStyle.button, pressed && !disabled && !loading && {
        backgroundColor: underlayColor
      }];
    },
    android_ripple: !ripple ? {
      color: calculatedRippleColor,
      borderless
    } : null
  }), loading ? /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.container
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.loadingContainer
  }, /*#__PURE__*/React.createElement(_reactNative.ActivityIndicator, {
    size: (0, _theme2.getThemeProperty)(theme.fontSize, loaderSize),
    color: (0, _theme2.getThemeColor)(theme.colors, loaderColor)
  }))) : /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: computedStyle.container
  }, /*#__PURE__*/React.createElement(React.Fragment, null, prefix, renderChildren(), suffix)));
}; // Button.defaultProps = {
//   bg: 'blue600',
//   p: 'lg',
//   color: 'white',
//   rounded: 'sm',
//   loading: false,
//   disabled: false,
//   loaderSize: '2xl',
//   loaderColor: 'white',
//   block: false,
//   position: 'relative',
//   shadowColor: 'gray800',
//   shadow: 0,
//   fontSize: 'lg',
//   rippleColor: 'white',
//   ripple: true,
//   borderless: false,
//   alignItems: 'center',
//   justifyContent: 'center',
//   alignSelf: 'flex-start',
//   onPress: () => {},
//   flexDir: 'row',
// };


exports.Button = Button;
//# sourceMappingURL=button.component.js.map