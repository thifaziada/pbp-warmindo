"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toast = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _snackbar = require("./snackbar.style");

var _theme = require("../../theme");

var _text = require("../text/text.component");

var _utilities = require("../../utilities");

var _types = require("../../types");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Toast = incomingProps => {
  const props = (0, _useDefaultProps.useDefaultProps)('Snackbar', incomingProps, {
    bg: 'gray900',
    color: 'white',
    p: 'lg',
    m: 'md',
    rounded: 'md',
    fontSize: 'md',
    duration: 4000,
    onClose: () => {},
    shadow: 2,
    shadowColor: 'gray500',
    flexDir: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
    useNativeDriver: false
  });
  const {
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    children,
    onClose,
    duration,
    suffix,
    prefix,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    flexDir,
    style,
    justifyContent,
    alignItems,
    alignSelf,
    shadow,
    shadowColor,
    opacity: opacityProp,
    useNativeDriver,
    ...rest
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const computedStyle = (0, _snackbar.getStyle)(theme, props);
  const [opacity] = (0, React.useState)(new _reactNative.Animated.Value(0.0));
  (0, React.useEffect)(() => {
    _reactNative.Animated.timing(opacity, {
      toValue: 1,
      useNativeDriver: true,
      duration: 250
    }).start();

    let closeTimeout = 0;

    if (duration !== 0 && typeof duration === 'number') {
      closeTimeout = setTimeout(() => {
        _reactNative.Animated.timing(opacity, {
          toValue: 0,
          useNativeDriver: true,
          duration: 250
        }).start(_ref => {
          let {
            finished
          } = _ref;

          if (finished) {
            onClose();
          }
        });
      }, duration);
    }

    return () => {
      closeTimeout && clearTimeout(closeTimeout);
    };
  }, [duration, onClose, opacity]);
  /**
   * renders children based on type
   */

  const renderChildren = () => {
    if (typeof children === 'string') {
      return /*#__PURE__*/React.createElement(_text.Text, _extends({}, (0, _utilities.getSpecificProps)(props, ..._types.textProps), {
        style: computedStyle.text
      }), children);
    }

    return children;
  };

  return /*#__PURE__*/React.createElement(_reactNative.SafeAreaView, {
    pointerEvents: "box-none",
    style: computedStyle.wrapper
  }, /*#__PURE__*/React.createElement(_reactNative.Animated.View, _extends({
    style: {
      opacity,
      transform: [{
        scale: opacity.interpolate({
          inputRange: [0, 1],
          outputRange: [0.9, 1]
        })
      }]
    }
  }, rest), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.container
  }, prefix && /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.prefix
  }, prefix), renderChildren(), suffix && /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.suffix
  }, suffix))));
};

exports.Toast = Toast;
//# sourceMappingURL=toast.component.js.map