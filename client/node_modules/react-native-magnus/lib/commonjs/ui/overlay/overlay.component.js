"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Overlay = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _overlay = require("./overlay.style");

var _theme = require("../../theme");

var _utilities = require("../../utilities");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Overlay = /*#__PURE__*/React.forwardRef((incomingProps, ref) => {
  const props = (0, _useDefaultProps.useDefaultProps)('Overlay', incomingProps, {
    bg: 'white',
    w: '80%',
    p: 'lg',
    rounded: 'md',
    overlayOpacity: 0.6,
    overlayColor: 'gray900',
    animationType: 'fade',
    transparent: true,
    onBackdropPress: () => {}
  });
  const {
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    bg,
    w,
    h,
    alignItems,
    justifyContent,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    visible: isVisible,
    children,
    overlayColor,
    overlayOpacity,
    onRequestClose,
    onBackdropPress,
    ...rest
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const computedStyle = (0, _overlay.getStyle)(theme, props);
  const [visible, setVisible] = (0, React.useState)(isVisible ?? false);
  (0, React.useEffect)(() => {
    if ('visible' in props) {
      setVisible(isVisible ?? false);
    }
  }, [isVisible, props]);
  /**
   * exposing functions to parent
   */

  (0, React.useImperativeHandle)(ref, () => ({
    open() {
      if (visible === false) {
        setVisible(true);
      }
    },

    close() {
      if (visible === true) {
        setVisible(false);
      }
    }

  }));
  return /*#__PURE__*/React.createElement(_reactNative.Modal, _extends({
    visible: visible,
    onRequestClose: (0, _utilities.isFunction)(onRequestClose) ? onRequestClose : () => setVisible(false)
  }, rest), /*#__PURE__*/React.createElement(_reactNative.TouchableWithoutFeedback, {
    onPress: onBackdropPress
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.modal
  }, /*#__PURE__*/React.createElement(_reactNative.TouchableWithoutFeedback, null, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.container
  }, children)))));
});
exports.Overlay = Overlay;
//# sourceMappingURL=overlay.component.js.map