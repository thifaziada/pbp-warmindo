"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Avatar = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _avatar = require("./avatar.style");

var _theme = require("../../theme");

var _avatarGroup = require("./avatar.group.component");

var _text = require("../text/text.component");

var _utilities = require("../../utilities");

var _types = require("../../types");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Avatar = incomingProps => {
  const props = (0, _useDefaultProps.useDefaultProps)('Avatar', incomingProps, {
    bg: 'transparent',
    size: 48,
    color: 'gray500',
    rounded: 'circle',
    fontSize: 'md',
    fontWeight: 'bold',
    shadow: 'none',
    shadowColor: 'gray500',
    position: 'relative',
    zIndex: 1
  });
  const {
    bg,
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    position,
    style,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    children,
    borderColor,
    color,
    fontSize,
    size,
    alignSelf,
    bottom,
    left,
    right,
    top,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    shadow,
    shadowColor,
    opacity,
    zIndex,
    source,
    ...rest
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const computedStyle = (0, _avatar.getStyle)(theme, props);
  /**
   * render the content based on the props passed
   */

  const renderContent = () => {
    if (source) {
      return /*#__PURE__*/React.createElement(_reactNative.Image, {
        source: source,
        style: computedStyle.image
      });
    }

    if (typeof children === 'string') {
      return /*#__PURE__*/React.createElement(_text.Text, (0, _utilities.getSpecificProps)(props, ..._types.textProps), children);
    }

    return children;
  };

  return /*#__PURE__*/React.createElement(_reactNative.View, _extends({
    style: computedStyle.container
  }, rest), renderContent());
}; // Avatar.defaultProps = {
//   bg: 'transparent',
//   size: 48,
//   color: 'gray500',
//   rounded: 'circle',
//   fontSize: 'md',
//   shadow: 'none',
//   shadowColor: 'gray500',
//   position: 'relative',
//   zIndex: 1,
// };


exports.Avatar = Avatar;
Avatar.Group = _avatarGroup.AvatarGroup;
//# sourceMappingURL=avatar.component.js.map