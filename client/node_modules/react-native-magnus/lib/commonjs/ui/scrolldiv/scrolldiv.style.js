"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStyle = void 0;

var _reactNative = require("react-native");

var _theme = require("../../theme/theme.service");

/**
 * computed style
 *
 * @param theme
 * @param props
 */
const getStyle = (theme, props) => {
  const computedStyle = {};
  computedStyle.div = {
    flexDirection: props.flexDir,
    flexWrap: props.flexWrap,
    alignItems: props.alignItems,
    justifyContent: props.justifyContent,
    position: props.position,
    backgroundColor: (0, _theme.getThemeColor)(theme.colors, props.bg),
    ...(0, _theme.createBorderWidthStyles)(props),
    ...(0, _theme.createSpacingStyles)(props, theme.spacing),
    ...(0, _theme.createBorderColorStyles)(props, theme.colors),
    ...(0, _theme.createBorderRadiusStyles)(props, theme.borderRadius)
  };
  computedStyle.image = { ...(0, _theme.createBorderRadiusStyles)(props, theme.borderRadius)
  };

  if (props.flex) {
    computedStyle.div = { ...computedStyle.div,
      flex: props.flex
    };
  }

  if (props.shadow) {
    computedStyle.div = { ...computedStyle.div,
      ...(theme.shadow && theme.shadow[props.shadow]),
      shadowColor: (0, _theme.getThemeColor)(theme.colors, props.shadowColor)
    };
  }

  if (props.h) {
    computedStyle.div = { ...computedStyle.div,
      height: props.h
    };
  }

  if (props.w) {
    computedStyle.div = { ...computedStyle.div,
      width: props.w
    };
  }

  if (props.top) {
    computedStyle.div = { ...computedStyle.div,
      top: props.top
    };
  }

  if (props.right) {
    computedStyle.div = { ...computedStyle.div,
      right: props.right
    };
  }

  if (props.bottom) {
    computedStyle.div = { ...computedStyle.div,
      bottom: props.bottom
    };
  }

  if (props.left) {
    computedStyle.div = { ...computedStyle.div,
      left: props.left
    };
  }

  if (props.minH) {
    computedStyle.div = { ...computedStyle.div,
      minHeight: props.minH
    };
  }

  if (props.minW) {
    computedStyle.div = { ...computedStyle.div,
      minWidth: props.minW
    };
  } // merging style props to computed style


  if (props.style) {
    computedStyle.div = { ...computedStyle.div,
      // @ts-ignore
      ...props.style
    };
  }

  return _reactNative.StyleSheet.create(computedStyle);
};

exports.getStyle = getStyle;
//# sourceMappingURL=scrolldiv.style.js.map