"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIconName = exports.getIconColor = exports.getIcon = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _icon = require("../icon/icon.component");

var _theme = require("../../theme/theme.service");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * get icon name based on state
 */
const getIconName = function () {
  let checked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  let disabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  switch (true) {
    case disabled:
      return 'indeterminate-check-box';

    case checked:
      return 'check-box';

    default:
      return 'check-box-outline-blank';
  }
};
/**
 * get icon name
 *
 * @param checked
 * @param disabled
 */


exports.getIconName = getIconName;

const getIconColor = (checked, disabled, activeColor, inactiveColor, theme) => {
  switch (true) {
    case disabled:
      return (0, _theme.getThemeColor)(theme.colors, inactiveColor);

    case checked:
      return (0, _theme.getThemeColor)(theme.colors, activeColor);

    default:
      return (0, _theme.getThemeColor)(theme.colors, inactiveColor);
  }
};
/*
 * get icon
 * shows activity indication if loading state is true
 */


exports.getIconColor = getIconColor;

const getIcon = (theme, props, checked) => {
  const {
    fontSize,
    loaderColor,
    activeIcon,
    activeColor,
    inactiveColor,
    disabled,
    inactiveIcon
  } = props;
  const iconName = getIconName(checked, disabled ?? false);
  const iconColor = getIconColor(checked, disabled, activeColor, inactiveColor, theme);

  if (props.loading) {
    return /*#__PURE__*/React.createElement(_reactNative.ActivityIndicator, {
      size: (0, _theme.getThemeProperty)(theme.fontSize, fontSize),
      color: (0, _theme.getThemeColor)(theme.colors, loaderColor),
      style: {
        zIndex: 2,
        position: 'relative'
      }
    });
  }

  if (checked) {
    if (props.activeIcon && typeof activeIcon === 'string') {
      return /*#__PURE__*/React.createElement(_icon.Icon, {
        name: activeIcon,
        color: iconColor,
        style: {
          zIndex: 2,
          position: 'relative'
        },
        fontFamily: "AntDesign",
        fontSize: fontSize
      });
    }

    if (props.activeIcon) {
      return activeIcon;
    }
  } else {
    if (inactiveIcon && typeof inactiveIcon === 'string') {
      return /*#__PURE__*/React.createElement(_icon.Icon, {
        name: inactiveIcon,
        color: iconColor,
        style: {
          zIndex: 2,
          position: 'relative'
        },
        fontFamily: "AntDesign",
        fontSize: fontSize
      });
    }

    if (inactiveIcon) {
      return inactiveIcon;
    }
  }

  return /*#__PURE__*/React.createElement(_icon.Icon, {
    name: iconName,
    color: iconColor,
    style: {
      zIndex: 2,
      position: 'relative'
    },
    fontFamily: "MaterialIcons",
    fontSize: fontSize
  });
};

exports.getIcon = getIcon;
//# sourceMappingURL=checkbox.service.js.map