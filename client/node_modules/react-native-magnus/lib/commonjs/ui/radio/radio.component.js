"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Radio = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _radio = require("./radio.style");

var _theme = require("../../theme");

var _icon = require("../icon/icon.component");

var _theme2 = require("../../theme/theme.service");

var _radio2 = require("./radio.service");

var _group = require("./group.component");

var _utilities = require("../../utilities");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Radio = incomingProps => {
  const props = (0, _useDefaultProps.useDefaultProps)('Radio', incomingProps, {
    defaultChecked: false,
    activeColor: 'blue600',
    inactiveColor: 'gray500',
    highlightBg: 'gray300',
    bg: 'transparent',
    p: 'none',
    checked: false,
    color: 'white',
    rounded: 'circle',
    loading: false,
    disabled: false,
    loaderSize: '2xl',
    loaderColor: 'blue600',
    block: false,
    position: 'relative',
    shadowColor: 'gray800',
    shadow: 0,
    fontSize: '5xl',
    borderless: true,
    alignItems: 'center',
    justifyContent: 'center',
    alignSelf: 'flex-start',
    onPress: () => {},
    flexDir: 'row'
  });
  const {
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    h,
    w,
    bg,
    minW,
    minH,
    suffix,
    style,
    fontSize,
    fontWeight,
    prefix,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    color: colorProp,
    loading,
    disabled,
    loaderColor,
    loaderSize,
    children,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    shadow,
    borderless,
    shadowColor,
    block,
    alignSelf,
    activeIcon,
    inactiveIcon,
    onChange,
    activeColor,
    inactiveColor,
    defaultChecked,
    value,
    checked: checkedProp,
    onPress: onPressProp,
    ...rest
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const [checked, setChecked] = (0, React.useState)(props.checked ?? defaultChecked);
  const [focussed, setFocussed] = (0, React.useState)(false);
  const computedStyle = (0, _radio.getStyle)(theme, props, {
    focussed
  });
  (0, React.useEffect)(() => {
    if ('checked' in props) {
      setChecked(props.checked);
    }
  }, [props]);
  /**
   * on press radio
   */

  const onPress = event => {
    if (disabled) {
      return;
    } // set the checked to true on press if there is no checked prop pass


    if (!('checked' in props)) {
      setChecked(true);
    }

    if ((0, _utilities.isFunction)(onPressProp)) {
      onPressProp(event);
    }

    if ((0, _utilities.isFunction)(onChange)) {
      onChange(value);
    }
  };
  /**
   * sets focussed to true
   *
   * @param event
   */


  const onPressIn = () => {
    setFocussed(true);
  };
  /**
   * sets focussed to true
   *
   * @param event
   */


  const onPressOut = () => {
    setFocussed(false);
  };

  const iconName = (0, _radio2.getIconName)(checked);
  const iconColor = (0, _radio2.getIconColor)(checked, disabled, activeColor, inactiveColor, theme);
  /**
   * get icon
   * shows activity indication if loading state is true
   */

  const getIcon = () => {
    if (loading) {
      return /*#__PURE__*/React.createElement(_reactNative.ActivityIndicator, {
        size: (0, _theme2.getThemeProperty)(theme.fontSize, fontSize),
        color: (0, _theme2.getThemeColor)(theme.colors, loaderColor),
        style: {
          zIndex: 2,
          position: 'relative'
        }
      });
    }

    if (checked) {
      if (activeIcon && typeof activeIcon === 'string') {
        return /*#__PURE__*/React.createElement(_icon.Icon // @ts-ignore
        , {
          name: activeIcon,
          color: iconColor,
          zIndex: 2,
          position: "relative",
          fontFamily: "AntDesign",
          fontSize: fontSize
        });
      }

      if (activeIcon) {
        return activeIcon;
      }
    } else {
      if (inactiveIcon && typeof inactiveIcon === 'string') {
        return /*#__PURE__*/React.createElement(_icon.Icon // @ts-ignore
        , {
          name: inactiveIcon,
          color: iconColor,
          zIndex: 2,
          position: "relative",
          fontFamily: "AntDesign",
          fontSize: fontSize
        });
      }

      if (inactiveIcon) {
        return inactiveIcon;
      }
    }

    return /*#__PURE__*/React.createElement(_icon.Icon, {
      name: iconName,
      color: iconColor,
      zIndex: 2,
      position: "relative",
      fontFamily: "MaterialIcons",
      fontSize: fontSize
    });
  };

  const renderChildren = () => {
    if ((0, _utilities.isFunction)(children)) {
      return children({
        focussed,
        disabled: disabled ?? false,
        checked,
        loading
      });
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, prefix, /*#__PURE__*/React.createElement(_reactNative.View, null, /*#__PURE__*/React.createElement(_reactNative.View, {
      style: computedStyle.highlightContainer
    }), /*#__PURE__*/React.createElement(_reactNative.View, {
      style: computedStyle.icon
    }, icon)), children, suffix);
  };

  const icon = getIcon();
  return /*#__PURE__*/React.createElement(_reactNative.Pressable, _extends({}, rest, {
    disabled: disabled ?? loading,
    style: computedStyle.button,
    onPress: disabled ? undefined : onPress,
    onPressIn: disabled ? undefined : onPressIn,
    onPressOut: disabled ? undefined : onPressOut
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.container
  }, renderChildren()));
}; // Radio.defaultProps = {
//   defaultChecked: false,
//   activeColor: 'blue600',
//   inactiveColor: 'gray500',
//   highlightBg: 'gray300',
//   bg: 'transparent',
//   p: 'none',
//   color: 'white',
//   rounded: 'circle',
//   loading: false,
//   disabled: false,
//   loaderSize: '2xl',
//   loaderColor: 'blue600',
//   block: false,
//   position: 'relative',
//   shadowColor: 'gray800',
//   shadow: 0,
//   fontSize: '5xl',
//   borderless: true,
//   alignItems: 'center',
//   justifyContent: 'center',
//   alignSelf: 'flex-start',
//   onPress: () => {},
//   flexDir: 'row',
// };
// passing RadioGroup as part of Radio


exports.Radio = Radio;
Radio.Group = _group.RadioGroup;
//# sourceMappingURL=radio.component.js.map