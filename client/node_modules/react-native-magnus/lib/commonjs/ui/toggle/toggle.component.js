"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toggle = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _toggle = require("./toggle.style");

var _theme = require("../../theme");

var _theme2 = require("../../theme/theme.service");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Toggle = incomingProps => {
  const props = (0, _useDefaultProps.useDefaultProps)('Toggle', incomingProps, {
    w: 55,
    h: 30,
    onPress: () => {},
    activeBg: 'green600',
    bg: 'gray400',
    on: false,
    circleBg: 'white',
    activeCircleBg: 'white',
    duration: 300,
    rounded: 'circle',
    disabled: false
  });
  const {
    h,
    w,
    bg,
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    disabled,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    onPress,
    activeBg,
    circleBg,
    activeCircleBg,
    duration,
    on,
    ...rest
  } = props;
  const [animXValue] = (0, React.useState)(new _reactNative.Animated.Value(on ? 1 : 0));
  const {
    theme
  } = (0, _theme.useTheme)();
  const computedStyle = (0, _toggle.getStyle)(theme, props);
  const endPos = w - h + 3;
  const circlePosXEnd = endPos;
  const [circlePosXStart] = (0, React.useState)(3);
  const prevSwitchOnRef = (0, React.useRef)();
  const prevSwitchOn = !!prevSwitchOnRef.current;
  /**
   *
   */

  (0, React.useEffect)(() => {
    const runAnimation = () => {
      const animValue = {
        fromValue: on ? 0 : 1,
        toValue: on ? 1 : 0,
        duration,
        useNativeDriver: false
      };

      _reactNative.Animated.timing(animXValue, animValue).start();
    };

    prevSwitchOnRef.current = on;

    if (prevSwitchOn !== on) {
      runAnimation();
    }
  }, [animXValue, prevSwitchOn, on, duration]);
  return /*#__PURE__*/React.createElement(_reactNative.TouchableOpacity, _extends({
    onPress: !disabled ? onPress : () => {},
    activeOpacity: 0.5
  }, rest), /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: [computedStyle.container, {
      backgroundColor: animXValue.interpolate({
        inputRange: [0, 1],
        outputRange: [(0, _theme2.getThemeColor)(theme.colors, bg), (0, _theme2.getThemeColor)(theme.colors, activeBg)]
      })
    }]
  }, /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: [computedStyle.circle, {
      backgroundColor: animXValue.interpolate({
        inputRange: [0, 1],
        outputRange: [(0, _theme2.getThemeColor)(theme.colors, circleBg), (0, _theme2.getThemeColor)(theme.colors, activeCircleBg)]
      })
    }, {
      transform: [{
        translateX: animXValue.interpolate({
          inputRange: [0, 1],
          outputRange: [circlePosXStart, circlePosXEnd]
        })
      }]
    }]
  })));
}; // Toggle.defaultProps = {
//   w: 55,
//   h: 30,
//   onPress: (): void => {},
//   activeBg: 'green600',
//   bg: 'gray400',
//   on: false,
//   circleBg: 'white',
//   activeCircleBg: 'white',
//   duration: 300,
//   rounded: 'circle',
//   disabled: false,
// };


exports.Toggle = Toggle;
//# sourceMappingURL=toggle.component.js.map