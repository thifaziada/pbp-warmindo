"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStyle = void 0;

var _reactNative = require("react-native");

var _theme = require("../../theme/theme.service");

/**
 * computed style
 *
 * @param theme
 * @param props
 */
const getStyle = (theme, props) => {
  const computedStyle = {};
  computedStyle.list = {
    flex: 1,
    zIndex: 99,
    backgroundColor: (0, _theme.getThemeColor)(theme.colors, props.bg),
    ...(0, _theme.createPositionStyle)(props),
    ...(0, _theme.createSpacingStyles)(props, theme.spacing),
    ...(0, _theme.createBorderWidthStyles)(props),
    ...(0, _theme.createBorderColorStyles)(props, theme.colors),
    ...(0, _theme.createBorderRadiusStyles)(props, theme.borderRadius)
  };
  computedStyle.loading = {
    height: 60,
    marginTop: -60,
    zIndex: 99,
    alignItems: 'center',
    justifyContent: 'center',
    ...(0, _theme.createSpacingStyles)(props, theme.spacing),
    backgroundColor: (0, _theme.getThemeColor)(theme.colors, props.bg),
    ...(0, _theme.createBorderWidthStyles)(props),
    ...(0, _theme.createBorderColorStyles)(props, theme.colors),
    ...(0, _theme.createBorderRadiusStyles)(props, theme.borderRadius),
    flex: 1
  };

  if (props.shadow) {
    computedStyle.list = { ...computedStyle.list,
      ...(theme.shadow && theme.shadow[props.shadow]),
      shadowColor: (0, _theme.getThemeColor)(theme.colors, props.shadowColor)
    };
  } // merging style props to computed style


  if (props.style) {
    computedStyle.container = { ...computedStyle.container,
      // @ts-ignore
      ...props.style
    };
  }

  return _reactNative.StyleSheet.create(computedStyle);
};

exports.getStyle = getStyle;
//# sourceMappingURL=mention.style.js.map