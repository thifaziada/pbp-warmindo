"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mention = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _mention = require("./mention.style");

var _theme = require("../../theme");

var _withDefaultProps = require("../../utilities/withDefaultProps");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MentionBase extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "previousChar", ' ');

    _defineProperty(this, "isTrackingStarted", false);

    _defineProperty(this, "state", {
      textInputHeight: '',
      isTrackingStarted: false
    });

    _defineProperty(this, "startTracking", () => {
      this.isTrackingStarted = true;
      this.setState({
        isTrackingStarted: true
      });
    });

    _defineProperty(this, "stopTracking", () => {
      const {
        onHide
      } = this.props;
      this.isTrackingStarted = false;
      this.setState({
        isTrackingStarted: false
      });

      if (onHide) {
        onHide();
      }
    });

    _defineProperty(this, "updateSuggestions", lastKeyword => {
      const {
        triggerCallback
      } = this.props;
      triggerCallback(lastKeyword);
    });

    _defineProperty(this, "identifyKeyword", val => {
      const {
        trigger,
        triggerLocation
      } = this.props;

      if (this.isTrackingStarted) {
        const boundary = triggerLocation === 'new-word-only' ? 'B' : '';
        const pattern = new RegExp(`\\${boundary}${trigger}[a-z0-9_-]+|\\${boundary}${trigger}`, 'gi');
        const keywordArray = val.match(pattern);

        if (keywordArray && !!keywordArray.length) {
          const lastKeyword = keywordArray[keywordArray.length - 1];
          this.updateSuggestions(lastKeyword);
        }
      }
    });

    _defineProperty(this, "onChangeText", val => {
      const {
        isTrackingStarted
      } = this.state;
      const {
        children,
        triggerLocation,
        trigger
      } = this.props;

      if (children.props.onChangeText) {
        children.props.onChangeText(val);
      }

      const lastChar = val.substr(val.length - 1);
      const wordBoundry = triggerLocation === 'new-word-only' ? this.previousChar.trim().length === 0 : true;

      if (lastChar === trigger && wordBoundry) {
        this.startTracking();
      } else if (lastChar === ' ' && isTrackingStarted || val === '') {
        this.stopTracking();
      }

      this.previousChar = lastChar;
      this.identifyKeyword(val);
    });

    _defineProperty(this, "resetTextbox", () => {
      this.previousChar = ' ';
      this.stopTracking();
    });
  }

  render() {
    const {
      isTrackingStarted
    } = this.state;
    const {
      m,
      mt,
      mr,
      mb,
      ml,
      p,
      pr,
      pt,
      pb,
      pl,
      borderColor,
      borderBottomColor,
      borderLeftColor,
      borderTopColor,
      borderRightColor,
      borderWidth,
      borderLeftWidth,
      borderRightWidth,
      borderBottomWidth,
      borderTopWidth,
      rounded,
      roundedTop,
      roundedRight,
      roundedBottom,
      roundedLeft,
      children,
      renderItem,
      loading,
      data,
      ...rest
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_theme.ThemeContext.Consumer, null, _ref => {
      let {
        theme
      } = _ref;
      const computedStyle = (0, _mention.getStyle)(theme, this.props);
      return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: {
          flex: 1
        }
      }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (data ?? []).length > 0 && isTrackingStarted && loading === false && /*#__PURE__*/_react.default.createElement(_reactNative.FlatList, _extends({
        data: data,
        showsVerticalScrollIndicator: true,
        style: computedStyle.list
      }, rest, {
        renderItem: rowData => renderItem(rowData)
      })), loading && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: computedStyle.loading
      }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, null))), /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.cloneElement(children, {
        onChangeText: this.onChangeText
      })));
    });
  }

}

const Mention = (0, _withDefaultProps.withDefaultProps)(MentionBase, 'Mention', {
  bg: 'white',
  rounded: 'md',
  borderColor: 'gray200',
  borderWidth: 1,
  horizontal: false,
  loading: false,
  shadow: 1,
  shadowColor: 'gray900',
  keyboardShouldPersistTaps: 'always',
  trigger: '@',
  position: 'absolute',
  bottom: 0,
  onHide: () => {}
});
exports.Mention = Mention;
//# sourceMappingURL=mention.component.js.map