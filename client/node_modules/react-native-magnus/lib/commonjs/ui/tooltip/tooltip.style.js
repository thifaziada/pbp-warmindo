"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStyle = void 0;

var _reactNative = require("react-native");

var _theme = require("../../theme/theme.service");

/**
 * computed style
 *
 * @param theme
 * @param props
 */
const getStyle = (theme, props, state) => {
  const computedStyle = {};
  computedStyle.container = {
    alignSelf: 'center',
    height: props.h,
    width: props.w,
    minWidth: props.minW,
    minHeight: props.minH,
    maxWidth: props.maxW,
    maxHeight: props.maxH,
    opacity: props.opacity,
    zIndex: props.zIndex,
    ...(0, _theme.createFlexStyles)(props),
    ...(0, _theme.createShadowStyles)(props, theme),
    ...(0, _theme.createBorderWidthStyles)(props),
    ...(0, _theme.createSpacingStyles)(props, theme.spacing),
    ...(0, _theme.createBorderColorStyles)(props, theme.colors),
    ...(0, _theme.createBorderRadiusStyles)(props, theme.borderRadius),
    backgroundColor: (0, _theme.getThemeColor)(theme.colors, props.bg)
  };
  computedStyle.image = { ...(0, _theme.createBorderRadiusStyles)(props, theme.borderRadius)
  };
  computedStyle.triangle = {
    width: 0,
    height: 0,
    left: state.left + state.buttonWidth / 2 - 8,
    top: state.invert ? state.menuHeight - 1 : 1,
    borderStyle: 'solid',
    borderLeftWidth: 8,
    borderRightWidth: 8,
    borderBottomWidth: 10,
    borderLeftColor: 'transparent',
    borderRightColor: 'transparent',
    opacity: props.opacity,
    zIndex: props.zIndex,
    borderBottomColor: (0, _theme.getThemeColor)(theme.colors, props.bg)
  };
  computedStyle.text = {
    fontWeight: props.fontWeight,
    textDecorationLine: props.textDecorLine,
    textDecorationStyle: props.textDecorStyle,
    letterSpacing: props.letterSpacing,
    fontStyle: props.fontStyle,
    textAlignVertical: props.textAlignVertical,
    lineHeight: props.lineHeight,
    textAlign: props.textAlign,
    textTransform: props.textTransform,
    fontSize: (0, _theme.getThemeProperty)(theme.fontSize, props.fontSize),
    color: (0, _theme.getThemeColor)(theme.colors, props.color)
  }; // merging style props to computed style

  if (props.style) {
    computedStyle.container = { ...computedStyle.container,
      // @ts-ignore
      ...props.style
    };
  }

  return _reactNative.StyleSheet.create(computedStyle);
};

exports.getStyle = getStyle;
//# sourceMappingURL=tooltip.style.js.map