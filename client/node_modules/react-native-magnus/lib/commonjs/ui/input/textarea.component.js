"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Textarea = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _input = require("./input.style");

var _theme = require("../../theme");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Textarea = incomingProps => {
  const props = (0, _useDefaultProps.useDefaultProps)('Textarea', incomingProps, {
    minH: 100,
    p: 'lg',
    borderColor: 'gray500',
    borderWidth: 1,
    multiline: true,
    textAlignVertical: 'top'
  });
  const {
    h,
    w,
    m,
    minH,
    minW,
    suffix,
    prefix,
    style,
    onBlur,
    onFocus,
    children,
    focusBorderColor,
    ...rest
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const [isFocussed, setIsFocussed] = (0, React.useState)(false);
  const computedStyle = (0, _input.getStyle)(theme, props, {
    isFocussed
  });
  /**
   * on focus input
   */

  const onFocusInput = e => {
    setIsFocussed(true);

    if (onFocus) {
      onFocus(e);
    }
  };
  /**
   * on blur input
   * @param e
   */


  const onBlurInput = e => {
    setIsFocussed(false);

    if (onBlur) {
      onBlur(e);
    }
  };

  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.container
  }, /*#__PURE__*/React.createElement(_reactNative.TextInput, _extends({
    onFocus: e => onFocusInput(e),
    onBlur: e => onBlurInput(e),
    style: computedStyle.input
  }, rest)));
}; // Textarea.defaultProps = {
//   minH: 100,
//   p: 'lg',
//   borderColor: 'gray500',
//   borderWidth: 1,
// };


exports.Textarea = Textarea;
//# sourceMappingURL=textarea.component.js.map