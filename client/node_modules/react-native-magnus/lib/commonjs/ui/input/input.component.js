"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;

var React = _interopRequireWildcard(require("react"));

var _color = _interopRequireDefault(require("color"));

var _reactNative = require("react-native");

var _input = require("./input.style");

var _theme = require("../../theme");

var _theme2 = require("../../theme/theme.service");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Input = /*#__PURE__*/React.forwardRef((incomingProps, ref) => {
  const props = (0, _useDefaultProps.useDefaultProps)('Input', incomingProps, {
    px: 'lg',
    py: 'lg',
    fontSize: 'md',
    borderWidth: 1,
    bg: 'white',
    borderColor: 'gray400',
    rounded: 'md',
    loading: false,
    color: 'gray800',
    shadow: 0,
    shadowColor: 'gray500',
    loaderSize: '3xl',
    loaderColor: 'blue700'
  });
  const {
    h,
    w,
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    bg,
    minH,
    minW,
    color: colorProp,
    suffix,
    prefix,
    style,
    onBlur,
    loading,
    onFocus,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    children,
    loaderSize,
    fontSize,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    loaderColor,
    focusBorderColor,
    shadow,
    flex,
    shadowColor,
    zIndex,
    opacity,
    placeholderTextColor,
    selectionColor,
    ...rest
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const [isFocussed, setIsFocussed] = (0, React.useState)(false);
  const computedStyle = (0, _input.getStyle)(theme, props, {
    isFocussed
  });
  const placeholderColor = placeholderTextColor ? typeof placeholderTextColor === 'string' ? (0, _color.default)((0, _theme2.getThemeColor)(theme.colors, placeholderTextColor)).alpha(0.4).rgb().string() : placeholderTextColor : (0, _color.default)((0, _theme2.getThemeColor)(theme.colors, colorProp)).alpha(0.4).rgb().string();
  /**
   * on focus input
   *
   * @param e
   */

  const onFocusInput = e => {
    setIsFocussed(true);

    if (onFocus) {
      onFocus(e);
    }
  };
  /**
   * on blur input
   *
   * @param e
   */


  const onBlurInput = e => {
    setIsFocussed(false);

    if (onBlur) {
      onBlur(e);
    }
  };

  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.container
  }, prefix && /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.prefix
  }, prefix), /*#__PURE__*/React.createElement(_reactNative.TextInput, _extends({
    ref: ref,
    onFocus: onFocusInput,
    onBlur: onBlurInput,
    selectionColor: typeof props.selectionColor === 'string' ? (0, _theme2.getThemeColor)(theme.colors, props.selectionColor) : props.selectionColor
  }, rest, {
    style: computedStyle.input,
    placeholderTextColor: placeholderColor
  })), !loading && suffix && /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.suffix
  }, suffix), loading && /*#__PURE__*/React.createElement(_reactNative.View, {
    style: computedStyle.suffix
  }, /*#__PURE__*/React.createElement(_reactNative.ActivityIndicator, {
    size: (0, _theme2.getThemeProperty)(theme.fontSize, loaderSize),
    color: (0, _theme2.getThemeColor)(theme.colors, loaderColor)
  })));
}); // Input.defaultProps = {
//   px: 'xl',
//   py: 'lg',
//   fontSize: 'lg',
//   borderWidth: 0,
//   bg: 'white',
//   borderColor: 'gray400',
//   rounded: 'md',
//   loading: false,
//   color: 'gray800',
//   shadow: 0,
//   shadowColor: 'gray500',
//   loaderSize: '3xl',
//   loaderColor: 'blue700',
// };

exports.Input = Input;
//# sourceMappingURL=input.component.js.map