"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStyle = void 0;

var _reactNative = require("react-native");

var _theme = require("../../theme/theme.service");

/**
 * computed style
 *
 * @param theme
 * @param props
 */
const getStyle = (theme, props) => {
  const computedStyle = {};
  computedStyle.div = {
    borderColor: (0, _theme.getThemeColor)(theme.colors, props.borderColor),
    borderWidth: props.borderWidth,
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'row',
    alignSelf: 'flex-start',
    backgroundColor: (0, _theme.getThemeColor)(theme.colors, props.bg),
    ...(0, _theme.createBorderWidthStyles)(props),
    ...(0, _theme.createSpacingStyles)(props, theme.spacing),
    ...(0, _theme.createBorderColorStyles)(props, theme.colors),
    ...(0, _theme.createBorderRadiusStyles)(props, theme.borderRadius)
  };
  computedStyle.prefix = {
    marginRight: 4
  };
  computedStyle.suffix = {
    marginLeft: 4
  };

  if (props.h) {
    computedStyle.div = { ...computedStyle.div,
      height: props.h
    };
  }

  if (props.w) {
    computedStyle.div = { ...computedStyle.div,
      width: props.w
    };
  }

  if (props.minH) {
    computedStyle.div = { ...computedStyle.div,
      minHeight: props.minH
    };
  }

  if (props.minW) {
    computedStyle.div = { ...computedStyle.div,
      minWidth: props.minW
    };
  } // merging style props to computed style


  if (props.style) {
    computedStyle.div = { ...computedStyle.div,
      // @ts-ignore
      ...props.style
    };
  }

  return _reactNative.StyleSheet.create(computedStyle);
};

exports.getStyle = getStyle;
//# sourceMappingURL=tag.style.js.map