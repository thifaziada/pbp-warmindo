{"version":3,"names":[],"sources":["select.type.tsx"],"sourcesContent":["import { ViewProps as RNViewProps } from 'react-native';\nimport {\n  BackgroundPropsType,\n  DimensionPropsType,\n  FlexPropsType,\n  PositionPropsType,\n  BorderPropsType,\n  SpacingPropsType,\n  RoundedPropsType,\n  ShadowPropsType,\n  VariantPropsType,\n} from '../../types';\nimport { SelectOption } from './select.option.component';\n\nexport interface CompoundedSelect\n  extends React.ForwardRefExoticComponent<\n    SelectProps & React.RefAttributes<SelectRef>\n  > {\n  Option: typeof SelectOption;\n}\n\nexport type SelectRef = {\n  open: () => void;\n  close: () => void;\n};\n\nexport interface SelectProps\n  extends RNViewProps,\n    BorderPropsType,\n    SpacingPropsType,\n    RoundedPropsType,\n    ShadowPropsType,\n    BackgroundPropsType,\n    FlexPropsType,\n    PositionPropsType,\n    DimensionPropsType,\n    VariantPropsType {\n  title?: string | React.ReactNode;\n  message?: string | React.ReactNode;\n\n  showScrollIndicator?: boolean;\n\n  multiple?: boolean;\n  value: any;\n  footer?: React.ReactElement[] | React.ReactElement;\n  onSelect: (value: any) => void;\n  data: any[];\n  renderItem: (item: any, index: number) => React.ReactElement;\n  keyExtractor?: (item: any, index: number) => string;\n  isVisible?: boolean;\n\n  searchableProps?: '*' | string[];\n  renderNoResultsView?: (searchTerm: string) => React.ReactElement;\n  renderSubmitButton?: () => React.ReactElement;\n  renderSearchInput?: (props: { clearText: () => void }) => React.ReactElement;\n}\n"],"mappings":""}