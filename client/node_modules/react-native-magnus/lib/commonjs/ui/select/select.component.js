"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNativeModal = _interopRequireDefault(require("react-native-modal"));

var _reactNative = require("react-native");

var _select = require("./select.style");

var _div = require("../div/div.component");

var _theme = require("../../theme");

var _text = require("../text/text.component");

var _input = require("../input/input.component");

var _icon = require("../icon/icon.component");

var _selectOption = require("./select.option.component");

var _button = require("../button/button.component");

var _useDefaultProps = require("../../utilities/useDefaultProps");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Select = /*#__PURE__*/React.forwardRef((incomingProps, ref) => {
  const props = (0, _useDefaultProps.useDefaultProps)('Select', incomingProps, {
    bg: 'white',
    rounded: 'none',
    flexDir: 'column',
    isVisible: false,
    renderNoResultsView: searchTerm => /*#__PURE__*/React.createElement(_div.Div, {
      flex: 1,
      px: "2xl",
      py: "xl"
    }, /*#__PURE__*/React.createElement(_text.Text, {
      fontSize: "lg"
    }, "No results found for \"", searchTerm, "\"")),
    keyExtractor: (_, index) => `${index}`
  });
  const {
    value,
    title,
    message,
    footer,
    data,
    multiple,
    renderItem,
    keyExtractor,
    renderNoResultsView,
    renderSubmitButton,
    renderSearchInput,
    searchableProps,
    onSelect: onSelectProp
  } = props;
  const {
    theme
  } = (0, _theme.useTheme)();
  const [visible, setVisible] = (0, React.useState)(props.isVisible || false);
  const [selectedValue, setSelectedValue] = (0, React.useState)(value);
  const [searchTerm, setSearchTerm] = (0, React.useState)('');
  const isSearchable = (0, React.useMemo)(() => !!(searchableProps !== null && searchableProps !== void 0 && searchableProps.length), [searchableProps]);
  const computedStyle = (0, _select.getStyle)(theme, props);

  const resolveMultiLevelAccess = (obj, key) => {
    return key.split('.').reduce((cur, keySection) => {
      if (cur === null || cur === undefined) {
        return;
      }

      if (cur[keySection] === null || cur[keySection] === undefined) {
        console.warn(`Property "${key}" does not exists! `);
        return;
      }

      return cur[keySection];
    }, obj);
  };

  const filteredData = (0, React.useMemo)(() => {
    if (!searchableProps || Array.isArray(searchableProps) && !searchableProps.length) {
      return data;
    }

    return data.filter(item => {
      const lowSearch = searchTerm.toLowerCase();

      if (!Array.isArray(searchableProps)) {
        return String(item).toLowerCase().includes(lowSearch);
      }

      return searchableProps.some(key => String(resolveMultiLevelAccess(item, key)).toLowerCase().includes(lowSearch));
    });
  }, [searchableProps, searchTerm, data]);
  (0, React.useEffect)(() => {
    if ('isVisible' in props) {
      setVisible(props.isVisible || visible);
    }
  }, [props, visible]);
  (0, React.useEffect)(() => {
    if (visible) {
      clearSearchInput();
    }
  }, [visible]);
  /**
   * exposing functions to parent
   */

  (0, React.useImperativeHandle)(ref, () => ({
    close() {
      setVisible(false);
    },

    open() {
      setVisible(true);
    }

  }));
  /**
   * set values of select based if its multiple select
   * or single valued select
   *
   * @param value
   */

  const onSelect = value => {
    let finalValue;

    if (multiple) {
      const copy = selectedValue.slice();
      const index = selectedValue.indexOf(value);

      if (index !== -1) {
        copy.splice(index, 1);
      } else {
        copy.push(value);
      }

      setSelectedValue(copy);
      finalValue = copy;
    } else {
      setSelectedValue(value);
      setVisible(false);
      finalValue = value;
    }

    onSelectProp(finalValue);
  };
  /**
   * render title at top select modal
   */


  const renderTitle = () => {
    if (title) {
      return typeof title === 'string' ? /*#__PURE__*/React.createElement(_text.Text, {
        px: "xl",
        fontSize: "lg",
        fontWeight: "bold",
        textTransform: "uppercase"
      }, title) : title;
    }

    return false;
  };
  /**
   * render message at top select modal
   */


  const renderMessage = () => {
    if (message) {
      return typeof message === 'string' ? /*#__PURE__*/React.createElement(_text.Text, {
        px: "xl",
        fontSize: "lg"
      }, message) : message;
    }

    return false;
  };

  const clearSearchInput = () => setSearchTerm('');
  /**
   * render searchbar at top select modal
   */


  const renderSearchbar = () => {
    if (!isSearchable) {
      return;
    }

    const searchInputElement = renderSearchInput && renderSearchInput({
      clearText: clearSearchInput
    });
    const mandatoryProps = {
      value: searchTerm,
      onChangeText: text => setSearchTerm(text),
      autoComplete: 'off'
    };

    if (searchInputElement) {
      return /*#__PURE__*/React.cloneElement(searchInputElement, mandatoryProps);
    }

    return /*#__PURE__*/React.createElement(_input.Input, _extends({
      mx: "xl",
      mt: "-md",
      fontSize: "lg",
      placeholder: "Search items",
      bg: "gray200",
      prefix: /*#__PURE__*/React.createElement(_icon.Icon, {
        mr: "lg",
        name: "search1",
        color: "gray700",
        fontSize: "3xl"
      }),
      suffix: searchTerm ? /*#__PURE__*/React.createElement(_button.Button, {
        mx: "-md",
        p: "md",
        alignSelf: "center",
        rounded: "circle",
        bg: "gray400",
        onPress: clearSearchInput
      }, /*#__PURE__*/React.createElement(_icon.Icon, {
        name: "close",
        fontSize: "xs",
        color: "gray900"
      })) : null
    }, mandatoryProps));
  };

  const renderFooter = () => {
    if (footer) {
      return footer;
    } // if the component is single-valued and no footer is provided
    // don't render anything in footer


    if (!multiple) {
      return;
    }

    const submitButtonElement = renderSubmitButton && renderSubmitButton();
    const mandatoryProps = {
      onPress: () => setVisible(false)
    };

    if (submitButtonElement) {
      return /*#__PURE__*/React.cloneElement(submitButtonElement, mandatoryProps);
    }

    return /*#__PURE__*/React.createElement(_button.Button, _extends({
      block: true,
      rounded: "none",
      bg: "green600"
    }, mandatoryProps), /*#__PURE__*/React.createElement(_text.Text, {
      fontSize: "xl",
      py: "xs",
      color: "white"
    }, "Submit"));
  };

  const renderNoResultsFound = () => {
    renderNoResultsView && renderNoResultsView(searchTerm);
  };

  return /*#__PURE__*/React.createElement(_reactNativeModal.default, {
    backdropTransitionOutTiming: 0,
    animationIn: "slideInUp",
    isVisible: visible,
    backdropColor: "black",
    onBackdropPress: () => setVisible(false),
    onBackButtonPress: () => setVisible(false),
    hideModalContentWhileAnimating: true,
    style: {
      margin: 0,
      justifyContent: 'flex-end'
    }
  }, /*#__PURE__*/React.createElement(_div.Div, {
    style: computedStyle.wrapper
  }, /*#__PURE__*/React.createElement(_reactNative.SafeAreaView, {
    style: computedStyle.container
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_div.Div, null, /*#__PURE__*/React.createElement(_div.Div, {
    py: "xl"
  }, renderTitle(), renderMessage()), /*#__PURE__*/React.createElement(_div.Div, null, renderSearchbar())), filteredData.length > 0 ? /*#__PURE__*/React.createElement(_div.Div, {
    flex: 1
  }, /*#__PURE__*/React.createElement(_reactNative.FlatList, {
    data: filteredData,
    keyExtractor: keyExtractor,
    renderItem: _ref => {
      let {
        item,
        index
      } = _ref;
      return /*#__PURE__*/React.cloneElement(renderItem(item, index), {
        onSelect,
        selectedValue
      });
    }
  })) : renderNoResultsFound(), renderFooter()))));
}); // Select.defaultProps = {
//   bg: 'white',
//   rounded: 'none',
//   flexDir: 'column',
//   isVisible: false,
//   // mb: 'xl',
//   // @ts-ignore
//   renderNoResultsView: (searchTerm) => (
//     <Div flex={1} px="2xl" py="xl">
//       <Text fontSize="lg">No results found for "{searchTerm}"</Text>
//     </Div>
//   ),
//   keyExtractor: (_, index) => `${index}`,
// };

exports.Select = Select;
Select.Option = _selectOption.SelectOption;
//# sourceMappingURL=select.component.js.map