"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CollapseBody = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _useDefaultProps = require("../../utilities/useDefaultProps");

var _div = require("../div/div.component");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const CollapseBody = incomingProps => {
  const props = (0, _useDefaultProps.useDefaultProps)('CollapseBody', incomingProps, {
    bg: 'transparent',
    p: 'xl',
    flexDir: 'column',
    flexWrap: 'nowrap',
    rounded: 'none',
    shadow: 'none',
    shadowColor: 'gray900',
    position: 'relative',
    bgMode: 'cover',
    pointerEvents: 'auto',
    row: false,
    borderStyle: 'solid'
  });
  const {
    expanded,
    children
  } = props;
  const startingHeight = 0;
  const animatedController = (0, React.useRef)(new _reactNative.Animated.Value(0)).current;
  const [bodySectionHeight, setBodySectionHeight] = (0, React.useState)(startingHeight);
  const bodyHeight = animatedController.interpolate({
    inputRange: [0, 1],
    outputRange: [0, bodySectionHeight]
  });
  React.useEffect(() => {
    if (expanded) {
      _reactNative.Animated.timing(animatedController, {
        useNativeDriver: false,
        duration: 300,
        toValue: 0,
        easing: _reactNative.Easing.bezier(0.4, 0.0, 0.2, 1)
      }).start();
    } else {
      _reactNative.Animated.timing(animatedController, {
        useNativeDriver: false,
        duration: 300,
        toValue: 1,
        easing: _reactNative.Easing.bezier(0.4, 0.0, 0.2, 1)
      }).start();
    }
  }, [animatedController, expanded]);

  const onLayout = e => {
    const height = e.nativeEvent.layout.height;
    setBodySectionHeight(height);
  };

  return /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: {
      height: bodyHeight,
      overflow: 'hidden'
    }
  }, /*#__PURE__*/React.createElement(_div.Div, _extends({}, props, {
    onLayout: onLayout
  }), children));
}; // CollapseBody.defaultProps = {
//   bg: 'transparent',
//   p: 'xl',
//   flexDir: 'column',
//   flexWrap: 'nowrap',
//   rounded: 'none',
//   shadow: 'none',
//   shadowColor: 'gray900',
//   position: 'relative',
//   bgMode: 'cover',
//   pointerEvents: 'auto',
//   row: false,
//   borderStyle: 'solid',
// };


exports.CollapseBody = CollapseBody;
//# sourceMappingURL=collapse.body.component.js.map