"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collapse = void 0;

var React = _interopRequireWildcard(require("react"));

var _utilities = require("../../utilities");

var _useDefaultProps = require("../../utilities/useDefaultProps");

var _div = require("../div/div.component");

var _collapseBody = require("./collapse.body.component");

var _collapseHeader = require("./collapse.header.component");

var _group = require("./group.component");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Collapse = incomingProps => {
  const props = (0, _useDefaultProps.useDefaultProps)('Collapse', incomingProps, {
    bg: 'white',
    flexDir: 'column',
    flexWrap: 'nowrap',
    rounded: 'md',
    overflow: 'hidden',
    shadow: 'none',
    mt: 'md',
    shadowColor: 'gray900',
    position: 'relative',
    bgMode: 'cover',
    pointerEvents: 'auto',
    row: false,
    borderStyle: 'solid',
    defaultActive: false
  });
  const {
    children,
    defaultActive,
    active,
    onChange,
    id,
    ...rest
  } = props;
  const [isActive, setIsActive] = (0, React.useState)(active ?? defaultActive);
  let header = null;
  let body = null;
  (0, React.useEffect)(() => {
    if ('active' in props) {
      setIsActive(props.active ?? false);
    }
  }, [props]);

  const changeState = newState => {
    setIsActive(newState);

    if ((0, _utilities.isFunction)(onChange)) {
      onChange(id);
    }
  };

  React.Children.forEach(children, child => {
    // @ts-ignore
    if (child.type === _collapseHeader.CollapseHeader) {
      header = child; // @ts-ignore
    } else if (child.type === _collapseBody.CollapseBody) {
      body = child;
    }
  });

  if (header === null) {
    throw Error("header wasn't found to be rendered. Please make sure you have wrapped an Collapse.Header in the Collapse Component.");
  }

  header = /*#__PURE__*/React.cloneElement(header, {
    active: isActive,
    onPress: () => {
      changeState(!isActive);
    }
  });
  return /*#__PURE__*/React.createElement(_div.Div, rest, header, !!body && /*#__PURE__*/React.cloneElement(body, {
    expanded: !isActive
  }));
}; // Collapse.defaultProps = {
//   bg: 'white',
//   flexDir: 'column',
//   flexWrap: 'nowrap',
//   rounded: 'md',
//   overflow: 'hidden',
//   shadow: 'none',
//   mt: 'md',
//   shadowColor: 'gray900',
//   position: 'relative',
//   bgMode: 'cover',
//   pointerEvents: 'auto',
//   row: false,
//   borderStyle: 'solid',
//   defaultActive: false,
// };


exports.Collapse = Collapse;
Collapse.Body = _collapseBody.CollapseBody;
Collapse.Header = _collapseHeader.CollapseHeader;
Collapse.Group = _group.CollapseGroup;
//# sourceMappingURL=collapse.component.js.map