import * as React from 'react';
import { useState } from 'react';
import { useDefaultProps } from '../../utilities/useDefaultProps';
import { Div } from '../div/div.component';

const CollapseGroup = incomingProps => {
  const props = useDefaultProps('CollapseGroup', incomingProps, {});
  const [activeId, setActiveId] = useState(props.defaultActive ?? null);
  const {
    children,
    onChange: onChangeProp,
    ...rest
  } = props;
  /**
   * checks if checked value is already in the state or not,
   * if it, remove it else add it
   *
   * @param value
   */

  const onChange = optionId => {
    setActiveId(optionId === activeId ? null : optionId);

    if (onChangeProp) {
      onChangeProp(optionId);
    }
  };
  /**
   * clones the children and add checked, onChange prop
   */


  const renderChildren = () => {
    return React.Children.map(children, child => {
      return /*#__PURE__*/React.cloneElement(child, {
        onChange,
        active: activeId === child.props.id
      });
    });
  };

  return /*#__PURE__*/React.createElement(Div, rest, renderChildren());
};

export { CollapseGroup };
//# sourceMappingURL=group.component.js.map