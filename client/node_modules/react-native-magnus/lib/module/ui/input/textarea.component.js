function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { useState } from 'react';
import { View as RNView, TextInput as RNTextInput } from 'react-native';
import { getStyle } from './input.style';
import { useTheme } from '../../theme';
import { useDefaultProps } from '../../utilities/useDefaultProps';

const Textarea = incomingProps => {
  const props = useDefaultProps('Textarea', incomingProps, {
    minH: 100,
    p: 'lg',
    borderColor: 'gray500',
    borderWidth: 1,
    multiline: true,
    textAlignVertical: 'top'
  });
  const {
    h,
    w,
    m,
    minH,
    minW,
    suffix,
    prefix,
    style,
    onBlur,
    onFocus,
    children,
    focusBorderColor,
    ...rest
  } = props;
  const {
    theme
  } = useTheme();
  const [isFocussed, setIsFocussed] = useState(false);
  const computedStyle = getStyle(theme, props, {
    isFocussed
  });
  /**
   * on focus input
   */

  const onFocusInput = e => {
    setIsFocussed(true);

    if (onFocus) {
      onFocus(e);
    }
  };
  /**
   * on blur input
   * @param e
   */


  const onBlurInput = e => {
    setIsFocussed(false);

    if (onBlur) {
      onBlur(e);
    }
  };

  return /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.container
  }, /*#__PURE__*/React.createElement(RNTextInput, _extends({
    onFocus: e => onFocusInput(e),
    onBlur: e => onBlurInput(e),
    style: computedStyle.input
  }, rest)));
}; // Textarea.defaultProps = {
//   minH: 100,
//   p: 'lg',
//   borderColor: 'gray500',
//   borderWidth: 1,
// };


export { Textarea };
//# sourceMappingURL=textarea.component.js.map