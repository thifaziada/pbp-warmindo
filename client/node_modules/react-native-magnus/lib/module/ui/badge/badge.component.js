function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { View as RNView } from 'react-native';
import { getStyle } from './badge.style';
import { useTheme } from '../../theme';
import { Text } from '../text/text.component';
import { getSpecificProps } from '../../utilities';
import { textProps } from '../../types';
import { useDefaultProps } from '../../utilities/useDefaultProps';

const Badge = incomingProps => {
  const props = useDefaultProps('Badge', incomingProps, {
    bg: 'green700',
    rounded: 'circle',
    shadow: 0,
    color: 'white',
    top: 0,
    right: 0,
    shadowColor: 'gray900',
    position: 'relative',
    fontSize: 'sm',
    fontWeight: 'bold'
  });
  const {
    h,
    w,
    m,
    mt,
    mr,
    bg,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    minH,
    minW,
    style,
    shadow,
    rounded,
    position,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    alignItems,
    fontSize,
    justifyContent,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderEndWidth,
    shadowColor,
    children,
    right,
    top,
    left,
    bottom,
    color,
    count,
    opacity,
    ...rest
  } = props;
  const {
    theme
  } = useTheme();
  const computedStyle = getStyle(theme, props);
  return /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.container
  }, /*#__PURE__*/React.createElement(RNView, {
    style: {
      alignSelf: 'flex-start'
    }
  }, typeof children !== 'string' && children, /*#__PURE__*/React.createElement(RNView, _extends({
    style: computedStyle.div
  }, rest), typeof children === 'string' && /*#__PURE__*/React.createElement(Text, _extends({}, getSpecificProps(props, ...textProps), {
    style: computedStyle.text
  }), children))));
}; // Badge.defaultProps = {
//   bg: 'green700',
//   rounded: 'circle',
//   shadow: 0,
//   color: 'white',
//   top: 0,
//   right: 0,
//   shadowColor: 'gray900',
//   position: 'relative',
//   fontSize: 'sm',
// };


export { Badge };
//# sourceMappingURL=badge.component.js.map