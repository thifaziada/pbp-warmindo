function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { View as RNView, Modal as RNModal, TouchableWithoutFeedback as RNTouchableWithoutFeedback } from 'react-native';
import { useState, useEffect, useImperativeHandle } from 'react';
import { getStyle } from './overlay.style';
import { useTheme } from '../../theme';
import { isFunction } from '../../utilities';
import { useDefaultProps } from '../../utilities/useDefaultProps';
const Overlay = /*#__PURE__*/React.forwardRef((incomingProps, ref) => {
  const props = useDefaultProps('Overlay', incomingProps, {
    bg: 'white',
    w: '80%',
    p: 'lg',
    rounded: 'md',
    overlayOpacity: 0.6,
    overlayColor: 'gray900',
    animationType: 'fade',
    transparent: true,
    onBackdropPress: () => {}
  });
  const {
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    bg,
    w,
    h,
    alignItems,
    justifyContent,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    visible: isVisible,
    children,
    overlayColor,
    overlayOpacity,
    onRequestClose,
    onBackdropPress,
    ...rest
  } = props;
  const {
    theme
  } = useTheme();
  const computedStyle = getStyle(theme, props);
  const [visible, setVisible] = useState(isVisible ?? false);
  useEffect(() => {
    if ('visible' in props) {
      setVisible(isVisible ?? false);
    }
  }, [isVisible, props]);
  /**
   * exposing functions to parent
   */

  useImperativeHandle(ref, () => ({
    open() {
      if (visible === false) {
        setVisible(true);
      }
    },

    close() {
      if (visible === true) {
        setVisible(false);
      }
    }

  }));
  return /*#__PURE__*/React.createElement(RNModal, _extends({
    visible: visible,
    onRequestClose: isFunction(onRequestClose) ? onRequestClose : () => setVisible(false)
  }, rest), /*#__PURE__*/React.createElement(RNTouchableWithoutFeedback, {
    onPress: onBackdropPress
  }, /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.modal
  }, /*#__PURE__*/React.createElement(RNTouchableWithoutFeedback, null, /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.container
  }, children)))));
});
export { Overlay };
//# sourceMappingURL=overlay.component.js.map