function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { Div } from '../div/div.component';
import { getThemeProperty, useTheme } from '../../theme';
import { useDefaultProps } from '../../utilities/useDefaultProps';

const AvatarGroup = incomingProps => {
  const props = useDefaultProps('AvatarGroup', incomingProps, {
    row: true,
    ml: 'none',
    offset: 'lg'
  });
  const {
    children,
    ml,
    offset,
    ...rest
  } = props;
  const {
    theme
  } = useTheme();
  const calculatedOffset = getThemeProperty(theme.spacing, offset);
  const calculatedMarginLeft = getThemeProperty(theme.spacing, ml);
  return /*#__PURE__*/React.createElement(Div, _extends({}, rest, {
    ml: calculatedOffset + calculatedMarginLeft
  }), React.Children.map(children, child => {
    return /*#__PURE__*/React.cloneElement(child, {
      ml: -1 * calculatedOffset
    });
  }));
}; // AvatarGroup.defaultProps = {
//   row: true,
//   ml: 'none',
//   offset: 'lg',
// };


export { AvatarGroup };
//# sourceMappingURL=avatar.group.component.js.map