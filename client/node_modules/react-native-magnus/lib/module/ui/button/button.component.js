function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { View as RNView, Animated as RNAnimated, Pressable as RNButton, ActivityIndicator as RNActivityIndicator } from 'react-native';
import { getStyle } from './button.style';
import { useTheme } from '../../theme';
import { getThemeProperty, getThemeColor } from '../../theme/theme.service';
import { getUnderlayColor, getRippleColor } from './button.service';
import { Text } from '../text/text.component';
import { textProps } from '../../types';
import { getSpecificProps } from '../../utilities';
import { useDefaultProps } from '../../utilities/useDefaultProps';

const Button = incomingProps => {
  const props = useDefaultProps('Button', incomingProps, {
    bg: 'blue600',
    p: 'lg',
    color: 'white',
    rounded: 'sm',
    loading: false,
    disabled: false,
    loaderSize: '2xl',
    loaderColor: 'white',
    block: false,
    position: 'relative',
    shadowColor: 'gray800',
    shadow: 0,
    fontSize: 'lg',
    rippleColor: 'white',
    ripple: true,
    borderless: false,
    alignItems: 'center',
    justifyContent: 'center',
    alignSelf: 'flex-start',
    onPress: () => {},
    flexDir: 'row'
  });
  const {
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    h,
    w,
    bg,
    minW,
    minH,
    suffix,
    style,
    fontSize,
    fontWeight,
    prefix,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    color: colorProp,
    loading,
    disabled,
    loaderColor,
    loaderSize,
    children,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    shadow,
    borderless,
    rippleColor,
    shadowColor,
    onPress,
    block,
    ripple,
    alignSelf,
    ...rest
  } = props;
  const {
    theme
  } = useTheme();
  const computedStyle = getStyle(theme, props);
  const underlayColor = getUnderlayColor(theme, props);
  const calculatedRippleColor = getRippleColor(theme, props);
  /**
   * renders children based on type
   */

  const renderChildren = () => {
    if (typeof children === 'string') {
      return /*#__PURE__*/React.createElement(Text, _extends({}, getSpecificProps(props, ...textProps), {
        style: computedStyle.text
      }), children);
    }

    return children;
  };

  return /*#__PURE__*/React.createElement(RNButton, _extends({}, rest, {
    onPress: disabled || loading ? undefined : onPress,
    style: _ref => {
      let {
        pressed
      } = _ref;
      return [computedStyle.button, pressed && !disabled && !loading && {
        backgroundColor: underlayColor
      }];
    },
    android_ripple: !ripple ? {
      color: calculatedRippleColor,
      borderless
    } : null
  }), loading ? /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.container
  }, /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.loadingContainer
  }, /*#__PURE__*/React.createElement(RNActivityIndicator, {
    size: getThemeProperty(theme.fontSize, loaderSize),
    color: getThemeColor(theme.colors, loaderColor)
  }))) : /*#__PURE__*/React.createElement(RNAnimated.View, {
    style: computedStyle.container
  }, /*#__PURE__*/React.createElement(React.Fragment, null, prefix, renderChildren(), suffix)));
}; // Button.defaultProps = {
//   bg: 'blue600',
//   p: 'lg',
//   color: 'white',
//   rounded: 'sm',
//   loading: false,
//   disabled: false,
//   loaderSize: '2xl',
//   loaderColor: 'white',
//   block: false,
//   position: 'relative',
//   shadowColor: 'gray800',
//   shadow: 0,
//   fontSize: 'lg',
//   rippleColor: 'white',
//   ripple: true,
//   borderless: false,
//   alignItems: 'center',
//   justifyContent: 'center',
//   alignSelf: 'flex-start',
//   onPress: () => {},
//   flexDir: 'row',
// };


export { Button };
//# sourceMappingURL=button.component.js.map