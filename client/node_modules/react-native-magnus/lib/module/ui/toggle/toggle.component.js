function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { Animated, TouchableOpacity } from 'react-native';
import { useEffect, useRef, useState } from 'react';
import { getStyle } from './toggle.style';
import { useTheme } from '../../theme';
import { getThemeColor } from '../../theme/theme.service';
import { useDefaultProps } from '../../utilities/useDefaultProps';

const Toggle = incomingProps => {
  const props = useDefaultProps('Toggle', incomingProps, {
    w: 55,
    h: 30,
    onPress: () => {},
    activeBg: 'green600',
    bg: 'gray400',
    on: false,
    circleBg: 'white',
    activeCircleBg: 'white',
    duration: 300,
    rounded: 'circle',
    disabled: false
  });
  const {
    h,
    w,
    bg,
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    disabled,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    onPress,
    activeBg,
    circleBg,
    activeCircleBg,
    duration,
    on,
    ...rest
  } = props;
  const [animXValue] = useState(new Animated.Value(on ? 1 : 0));
  const {
    theme
  } = useTheme();
  const computedStyle = getStyle(theme, props);
  const endPos = w - h + 3;
  const circlePosXEnd = endPos;
  const [circlePosXStart] = useState(3);
  const prevSwitchOnRef = useRef();
  const prevSwitchOn = !!prevSwitchOnRef.current;
  /**
   *
   */

  useEffect(() => {
    const runAnimation = () => {
      const animValue = {
        fromValue: on ? 0 : 1,
        toValue: on ? 1 : 0,
        duration,
        useNativeDriver: false
      };
      Animated.timing(animXValue, animValue).start();
    };

    prevSwitchOnRef.current = on;

    if (prevSwitchOn !== on) {
      runAnimation();
    }
  }, [animXValue, prevSwitchOn, on, duration]);
  return /*#__PURE__*/React.createElement(TouchableOpacity, _extends({
    onPress: !disabled ? onPress : () => {},
    activeOpacity: 0.5
  }, rest), /*#__PURE__*/React.createElement(Animated.View, {
    style: [computedStyle.container, {
      backgroundColor: animXValue.interpolate({
        inputRange: [0, 1],
        outputRange: [getThemeColor(theme.colors, bg), getThemeColor(theme.colors, activeBg)]
      })
    }]
  }, /*#__PURE__*/React.createElement(Animated.View, {
    style: [computedStyle.circle, {
      backgroundColor: animXValue.interpolate({
        inputRange: [0, 1],
        outputRange: [getThemeColor(theme.colors, circleBg), getThemeColor(theme.colors, activeCircleBg)]
      })
    }, {
      transform: [{
        translateX: animXValue.interpolate({
          inputRange: [0, 1],
          outputRange: [circlePosXStart, circlePosXEnd]
        })
      }]
    }]
  })));
}; // Toggle.defaultProps = {
//   w: 55,
//   h: 30,
//   onPress: (): void => {},
//   activeBg: 'green600',
//   bg: 'gray400',
//   on: false,
//   circleBg: 'white',
//   activeCircleBg: 'white',
//   duration: 300,
//   rounded: 'circle',
//   disabled: false,
// };


export { Toggle };
//# sourceMappingURL=toggle.component.js.map