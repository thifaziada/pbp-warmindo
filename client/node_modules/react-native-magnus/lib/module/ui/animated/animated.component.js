function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { ImageBackground as RNImageBackground, View as RNView } from 'react-native';
import * as Animatable from 'react-native-animatable';
import { useTheme } from '../../theme';
import { getStyle } from './animated.style';
import { registerAnimations } from './animated.service';
import { useDefaultProps } from '../../utilities/useDefaultProps';
registerAnimations();

const Animated = incomingProps => {
  const props = useDefaultProps('Animated', incomingProps, {
    bg: 'transparent',
    flexWrap: 'nowrap',
    rounded: 'none',
    shadow: 'none',
    shadowColor: 'gray900',
    position: 'relative',
    bgMode: 'cover',
    animation: 'fromTop',
    duration: 150,
    delay: 0
  });
  const {
    h,
    w,
    m,
    mt,
    mr,
    mb,
    ml,
    p,
    pr,
    pt,
    pb,
    pl,
    minH,
    minW,
    position,
    style,
    flexDir,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    children,
    bgImg,
    duration,
    bgMode,
    animation,
    alignItems,
    justifyContent,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    flexWrap,
    shadow,
    shadowColor,
    delay,
    ...rest
  } = props;
  const {
    theme
  } = useTheme();
  const computedStyle = getStyle(theme, props);

  if (bgImg) {
    return /*#__PURE__*/React.createElement(Animatable.View, {
      animation: `magnus-${animation}`,
      duration: duration,
      easing: "ease-in-out",
      iterationCount: 1
    }, /*#__PURE__*/React.createElement(RNImageBackground, _extends({
      source: bgImg,
      style: computedStyle.div,
      resizeMode: props.bgMode,
      imageStyle: computedStyle.image
    }, rest), children));
  }

  return /*#__PURE__*/React.createElement(Animatable.View, {
    animation: `magnus-${animation}`,
    duration: duration,
    easing: "ease-in-out",
    iterationCount: 1,
    delay: delay
  }, /*#__PURE__*/React.createElement(RNView, _extends({
    style: { ...computedStyle.div
    }
  }, rest), children));
}; // Animated.defaultProps = {
//   bg: 'transparent',
//   flexWrap: 'nowrap',
//   rounded: 'none',
//   shadow: 'none',
//   shadowColor: 'gray900',
//   position: 'relative',
//   bgMode: 'cover',
//   animation: 'fromTop',
//   duration: 150,
//   delay: 0,
// };


export { Animated };
//# sourceMappingURL=animated.component.js.map