import * as React from 'react';
import { View } from 'react-native';
import { useKey } from './hooks/useKey';
import { Manager } from './manager.component';
export const Context = /*#__PURE__*/React.createContext(null);
export const Host = _ref => {
  let {
    children,
    style
  } = _ref;
  const managerRef = React.useRef(null);
  const queue = [];
  const {
    generateKey,
    removeKey
  } = useKey();
  React.useEffect(() => {
    var _managerRef$current, _managerRef$current2, _managerRef$current3;

    while (queue.length && managerRef.current) {
      const action = queue.pop();

      if (action) {
        switch (action.type) {
          case 'mount':
            (_managerRef$current = managerRef.current) === null || _managerRef$current === void 0 ? void 0 : _managerRef$current.mount(action.key, action.children);
            break;

          case 'update':
            (_managerRef$current2 = managerRef.current) === null || _managerRef$current2 === void 0 ? void 0 : _managerRef$current2.update(action.key, action.children);
            break;

          case 'unmount':
            (_managerRef$current3 = managerRef.current) === null || _managerRef$current3 === void 0 ? void 0 : _managerRef$current3.unmount(action.key);
            break;
        }
      }
    }
  }, []);

  const mount = children => {
    const key = generateKey();

    if (managerRef.current) {
      managerRef.current.mount(key, children);
    } else {
      queue.push({
        type: 'mount',
        key,
        children
      });
    }

    return key;
  };

  const update = (key, children) => {
    if (managerRef.current) {
      managerRef.current.update(key, children);
    } else {
      const op = {
        type: 'mount',
        key,
        children
      };
      const index = queue.findIndex(o => o.type === 'mount' || o.type === 'update' && o.key === key);

      if (index > -1) {
        queue[index] = op;
      } else {
        queue.push(op);
      }
    }
  };

  const unmount = key => {
    if (managerRef.current) {
      managerRef.current.unmount(key);
      removeKey(key);
    } else {
      queue.push({
        type: 'unmount',
        key
      });
    }
  };

  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: {
      mount,
      update,
      unmount
    }
  }, /*#__PURE__*/React.createElement(View, {
    style: [{
      flex: 1
    }, style],
    collapsable: false,
    pointerEvents: "box-none"
  }, children), /*#__PURE__*/React.createElement(Manager, {
    ref: managerRef
  }));
};
//# sourceMappingURL=host.component.js.map