function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import Modal from 'react-native-modal';
import { SafeAreaView, Platform, View } from 'react-native';
import { useState, useImperativeHandle, useEffect } from 'react';
import { Div } from '../div/div.component';
import { getStyle } from './dropdown.style';
import { Text } from '../text/text.component';
import { DropdownOption } from './dropdown.option.component';
import { useTheme } from '../../theme';
import { useDefaultProps } from '../../utilities/useDefaultProps';
import { getThemeColor } from '../../theme/theme.service';
const Dropdown = /*#__PURE__*/React.forwardRef((incomingProps, ref) => {
  const props = useDefaultProps('Dropdown', incomingProps, {
    bg: 'white',
    rounded: 'none',
    showSwipeIndicator: Platform.OS === 'web' ? false : true,
    backdropColor: 'gray900',
    backdropOpacity: 0.5,
    flexWrap: 'nowrap',
    backdropTransitionOutTiming: 0,
    overflow: 'hidden',
    py: 'xl'
  });
  const {
    bg,
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    style,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    title,
    showSwipeIndicator,
    children,
    backdropColor,
    flexDir,
    flexWrap,
    isVisible,
    onBackdropPress,
    swipeDirection,
    onSwipeComplete,
    ...rest
  } = props;
  const {
    theme
  } = useTheme();
  const computedStyle = getStyle(theme, props);
  const [visible, setVisible] = useState(props.isVisible ?? false);
  useEffect(() => {
    if ('isVisible' in props) {
      setVisible(props.isVisible ?? false);
    }
  }, [props, visible]);
  /**
   * exposing functions through ref
   */

  useImperativeHandle(ref, () => ({
    open() {
      setVisible(true);
    },

    close() {
      setVisible(false);
    }

  }));
  /**
   * render title
   */

  const renderTitle = () => {
    if (title) {
      return typeof title === 'string' ? /*#__PURE__*/React.createElement(Text, {
        fontSize: "md",
        color: "gray700"
      }, title) : title;
    }

    return false;
  };
  /**
   * render scroll indicator
   */


  const renderIndicator = () => {
    return showSwipeIndicator && /*#__PURE__*/React.createElement(Div, {
      h: 7,
      rounded: "xl",
      w: 40,
      bg: "gray200",
      style: computedStyle.indicator
    });
  };

  return /*#__PURE__*/React.createElement(Modal, _extends({
    isVisible: visible,
    onSwipeComplete: params => {
      setVisible(false);
      onSwipeComplete && onSwipeComplete(params);
    },
    backdropColor: getThemeColor(theme.colors, backdropColor),
    onBackdropPress: 'onBackdropPress' in props ? onBackdropPress : () => setVisible(false),
    style: {
      margin: 0,
      justifyContent: Platform.OS === 'web' ? 'center' : 'flex-end'
    },
    swipeDirection: "down"
  }, rest), /*#__PURE__*/React.createElement(View, {
    style: computedStyle.wrapper
  }, renderIndicator(), /*#__PURE__*/React.createElement(SafeAreaView, null, /*#__PURE__*/React.createElement(View, {
    style: computedStyle.container
  }, renderTitle(), /*#__PURE__*/React.createElement(View, {
    style: computedStyle.options
  }, React.Children.map(children, child => {
    return /*#__PURE__*/React.cloneElement(child, {
      onSelect: () => {
        setVisible(false);
      }
    });
  }))))));
});
Dropdown.Option = DropdownOption; // Dropdown.defaultProps = {
//   bg: 'white',
//   rounded: 'none',
//   showSwipeIndicator: Platform.OS === 'web' ? false : true,
//   backdropColor: 'gray900',
//   backdropOpacity: 0.5,
//   flexWrap: 'nowrap',
//   backdropTransitionOutTiming: 0,
//   overflow: 'hidden',
// };

export { Dropdown };
//# sourceMappingURL=dropdown.component.js.map