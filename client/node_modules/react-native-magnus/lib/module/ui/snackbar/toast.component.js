function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { useState, useEffect } from 'react';
import { Animated, SafeAreaView, View as RNView } from 'react-native';
import { getStyle } from './snackbar.style';
import { useTheme } from '../../theme';
import { Text } from '../text/text.component';
import { getSpecificProps } from '../../utilities';
import { textProps } from '../../types';
import { useDefaultProps } from '../../utilities/useDefaultProps';

const Toast = incomingProps => {
  const props = useDefaultProps('Snackbar', incomingProps, {
    bg: 'gray900',
    color: 'white',
    p: 'lg',
    m: 'md',
    rounded: 'md',
    fontSize: 'md',
    duration: 4000,
    onClose: () => {},
    shadow: 2,
    shadowColor: 'gray500',
    flexDir: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
    useNativeDriver: false
  });
  const {
    m,
    mt,
    mr,
    mb,
    ml,
    ms,
    p,
    pr,
    pt,
    pb,
    pl,
    rounded,
    roundedTop,
    roundedRight,
    roundedBottom,
    roundedLeft,
    children,
    onClose,
    duration,
    suffix,
    prefix,
    borderColor,
    borderBottomColor,
    borderLeftColor,
    borderTopColor,
    borderRightColor,
    borderWidth,
    borderLeftWidth,
    borderRightWidth,
    borderBottomWidth,
    borderTopWidth,
    borderEndWidth,
    flexDir,
    style,
    justifyContent,
    alignItems,
    alignSelf,
    shadow,
    shadowColor,
    opacity: opacityProp,
    useNativeDriver,
    ...rest
  } = props;
  const {
    theme
  } = useTheme();
  const computedStyle = getStyle(theme, props);
  const [opacity] = useState(new Animated.Value(0.0));
  useEffect(() => {
    Animated.timing(opacity, {
      toValue: 1,
      useNativeDriver: true,
      duration: 250
    }).start();
    let closeTimeout = 0;

    if (duration !== 0 && typeof duration === 'number') {
      closeTimeout = setTimeout(() => {
        Animated.timing(opacity, {
          toValue: 0,
          useNativeDriver: true,
          duration: 250
        }).start(_ref => {
          let {
            finished
          } = _ref;

          if (finished) {
            onClose();
          }
        });
      }, duration);
    }

    return () => {
      closeTimeout && clearTimeout(closeTimeout);
    };
  }, [duration, onClose, opacity]);
  /**
   * renders children based on type
   */

  const renderChildren = () => {
    if (typeof children === 'string') {
      return /*#__PURE__*/React.createElement(Text, _extends({}, getSpecificProps(props, ...textProps), {
        style: computedStyle.text
      }), children);
    }

    return children;
  };

  return /*#__PURE__*/React.createElement(SafeAreaView, {
    pointerEvents: "box-none",
    style: computedStyle.wrapper
  }, /*#__PURE__*/React.createElement(Animated.View, _extends({
    style: {
      opacity,
      transform: [{
        scale: opacity.interpolate({
          inputRange: [0, 1],
          outputRange: [0.9, 1]
        })
      }]
    }
  }, rest), /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.container
  }, prefix && /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.prefix
  }, prefix), renderChildren(), suffix && /*#__PURE__*/React.createElement(RNView, {
    style: computedStyle.suffix
  }, suffix))));
};

export { Toast };
//# sourceMappingURL=toast.component.js.map