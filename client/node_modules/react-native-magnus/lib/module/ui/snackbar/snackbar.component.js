function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import { StyleSheet, KeyboardAvoidingView, Platform } from 'react-native';
import { Toast } from './toast.component';

class Snackbar extends Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "show", (message, config) => {
      let id = (config === null || config === void 0 ? void 0 : config.id) || Math.random().toString();

      const onClose = () => this.hide(id);

      requestAnimationFrame(() => {
        this.setState({
          toasts: this.state.toasts.filter(t => t.id !== id)
        });
        this.setState({
          toasts: [{
            id,
            message,
            onClose,
            ...config
          }, ...this.state.toasts]
        });
      });
      return id;
    });

    _defineProperty(this, "update", (id, message, config) => {
      this.setState({
        toasts: this.state.toasts.map(toast => toast.id === id ? { ...toast,
          message,
          ...config
        } : toast)
      });
    });

    _defineProperty(this, "hide", id => {
      this.setState({
        toasts: this.state.toasts.filter(t => t.id !== id)
      });
    });

    this.state = {
      toasts: []
    };
  }

  render() {
    const {
      toasts
    } = this.state;
    const {
      placement,
      offset
    } = this.props;
    let style = {
      bottom: placement === 'bottom' ? offset : undefined,
      top: placement === 'top' ? offset : undefined,
      justifyContent: placement === 'bottom' ? 'flex-end' : 'flex-start',
      flexDirection: placement === 'bottom' ? 'column' : 'column-reverse'
    };
    return /*#__PURE__*/React.createElement(KeyboardAvoidingView, {
      behavior: Platform.OS === 'ios' ? 'position' : undefined,
      style: [styles.container, style],
      pointerEvents: "box-none"
    }, toasts.map(toast => {
      const {
        message,
        id,
        ...rest
      } = toast;
      return /*#__PURE__*/React.createElement(Toast, _extends({
        key: id
      }, this.props, rest), message);
    }));
  }

}

_defineProperty(Snackbar, "defaultProps", {
  placement: 'bottom',
  offset: 0
});

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    width: '100%'
  }
});
export { Snackbar };
//# sourceMappingURL=snackbar.component.js.map